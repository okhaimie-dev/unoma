// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Profiles extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profiles entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profiles must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profiles", id.toString(), this);
    }
  }

  static load(id: string): Profiles | null {
    return changetype<Profiles | null>(store.get("Profiles", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileAddress(): string | null {
    let value = this.get("profileAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileAddress(value: string | null) {
    if (!value) {
      this.unset("profileAddress");
    } else {
      this.set("profileAddress", Value.fromString(<string>value));
    }
  }

  get profileThumbnailUrl(): string | null {
    let value = this.get("profileThumbnailUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileThumbnailUrl(value: string | null) {
    if (!value) {
      this.unset("profileThumbnailUrl");
    } else {
      this.set("profileThumbnailUrl", Value.fromString(<string>value));
    }
  }

  get profileName(): string | null {
    let value = this.get("profileName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileName(value: string | null) {
    if (!value) {
      this.unset("profileName");
    } else {
      this.set("profileName", Value.fromString(<string>value));
    }
  }

  get profileBio(): string | null {
    let value = this.get("profileBio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileBio(value: string | null) {
    if (!value) {
      this.unset("profileBio");
    } else {
      this.set("profileBio", Value.fromString(<string>value));
    }
  }
}

export class PodcastName extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PodcastName entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PodcastName must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PodcastName", id.toString(), this);
    }
  }

  static load(id: string): PodcastName | null {
    return changetype<PodcastName | null>(store.get("PodcastName", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileAddress(): string | null {
    let value = this.get("profileAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileAddress(value: string | null) {
    if (!value) {
      this.unset("profileAddress");
    } else {
      this.set("profileAddress", Value.fromString(<string>value));
    }
  }

  get podcastName(): string | null {
    let value = this.get("podcastName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set podcastName(value: string | null) {
    if (!value) {
      this.unset("podcastName");
    } else {
      this.set("podcastName", Value.fromString(<string>value));
    }
  }
}

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Post must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileAddress(): string | null {
    let value = this.get("profileAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileAddress(value: string | null) {
    if (!value) {
      this.unset("profileAddress");
    } else {
      this.set("profileAddress", Value.fromString(<string>value));
    }
  }

  get podcastName(): string | null {
    let value = this.get("podcastName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set podcastName(value: string | null) {
    if (!value) {
      this.unset("podcastName");
    } else {
      this.set("podcastName", Value.fromString(<string>value));
    }
  }

  get postThumbnailUrl(): string | null {
    let value = this.get("postThumbnailUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set postThumbnailUrl(value: string | null) {
    if (!value) {
      this.unset("postThumbnailUrl");
    } else {
      this.set("postThumbnailUrl", Value.fromString(<string>value));
    }
  }

  get postAudioUrl(): string | null {
    let value = this.get("postAudioUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set postAudioUrl(value: string | null) {
    if (!value) {
      this.unset("postAudioUrl");
    } else {
      this.set("postAudioUrl", Value.fromString(<string>value));
    }
  }

  get postTitle(): string | null {
    let value = this.get("postTitle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set postTitle(value: string | null) {
    if (!value) {
      this.unset("postTitle");
    } else {
      this.set("postTitle", Value.fromString(<string>value));
    }
  }
}
